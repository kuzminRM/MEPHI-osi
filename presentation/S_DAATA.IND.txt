;параметры:  userdata (буфер)
out CurrentSystemName() " s data ind __start"

$userdata setto dataReceived

$selectedSyntax == 1 if len_tag
$selectedSyntax == 2 if end_symb_tag

return

len_tag:
out "decode len | reveresed to decode end symbol"
goto end_symb_tag
return

end_symb_tag:
out "decode end symbol"
dataReceived unbufferit dataType 1
out "dataType = " $dataType
$dataType == 1 if decode_string_tag
$dataType == 2 if send_as_is_tag
$dataType == 3 if send_as_is_tag
$dataType == 4 if send_as_is_tag
return

send_as_is_tag:
out "send as is"
userdata $dataReceived sendup P_DATA.IND
return

decode_string_tag:
dataReceived unbufferit dataType 1 strData sizeof(dataReceived)-1

; инициализируем переменные для результата
"" setto resultStrData
1 setto currentPos
sizeof(strData) setto strLength

replace_loop_tag:
; пока не достигли конца строки
$currentPos > $strLength if end_replace_tag

; копируем один символ из исходной строки
copy (strData, $currentPos, 1) setto tempChar

; проверяем, является ли символ открывающим / закрывающим
$tempChar == $unifiedOpenSymbol if replace_open_tag
$tempChar == $unifiedCloseSymbol if replace_close_tag

; если символ не нуждается в замене, добавляем его к результату
$resultStrData + $tempChar setto resultStrData
goto continue_replace_tag

replace_open_tag:
$resultStrData + $ourOpenSymbol setto resultStrData
goto continue_replace_tag

replace_close_tag:
$resultStrData + $ourCloseSymbol setto resultStrData
goto continue_replace_tag

continue_replace_tag:
; увеличиваем текущую позицию
$currentPos + 1 setto currentPos
goto replace_loop_tag

end_replace_tag:

out "Результат после декодирования  : " $resultStrData
dataToSend pack $dataType 1 $resultStrData sizeof(dataToSend) sizeof(dataToSend)+1
userdata $dataToSend sendup P_DATA.IND
return
