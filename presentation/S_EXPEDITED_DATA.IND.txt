;параметры:  userdata (буфер)
out CurrentSystemName() " s expedited data ind __start"

; достаем entityNum
userdata unbufferit entityNum 1 dataReceived sizeof(userdata)-1

; определяем какой запрос пришел
$entityNum == 1 if context_req_tag
$entityNum == 2 if context_resp_tag
$entityNum == 3 if context_from_conf_tag
$entityNum == 4 if original_data_tag

return

context_req_tag:
out "requested context"
; отправляем сохраненный contextFromConnectResp
dataToSend pack 2 1 $contextFromConnectResp sizeof(contextFromConnectResp) sizeof(contextFromConnectResp)+1
userdata $dataToSend eventdown S_EXPEDITED_DATA.REQ
return

context_resp_tag:
out "context delivered"
$dataReceived  setto contextFromConnectResp

; получаем какие синтаксисы передачи данных разрешены у нас
sizeof(contextFromConnectReq) != 4 if skip_if_context_11_tag
1 setto isOurSyntaxLenEnabled
1 setto isOurSyntaxEndSymbolEnabled
skip_if_context_11_tag:
sizeof(contextFromConnectReq) != 3 if skip_if_context_12_tag
contextFromConnectReq unbufferit temp 2 syntaxNumTemp 1
$syntaxNumTemp == 1 if skip_if_context_13_tag
1 setto isOurSyntaxLenEnabled
0 setto isOurSyntaxEndSymbolEnabled
skip_if_context_13_tag:
$syntaxNumTemp == 2 if skip_if_context_14_tag
0 setto isOurSyntaxLenEnabled
1 setto isOurSyntaxEndSymbolEnabled
skip_if_context_14_tag:
skip_if_context_12_tag:
out "our Len = " $isOurSyntaxLenEnabled " EndSymb " $isOurSyntaxEndSymbolEnabled

; получаем какие синтаксисы передачи данных разрешены у них
sizeof(contextFromConnectResp) != 4 if skip_if_context_21_tag
1 setto isTheirSyntaxLenEnabled
1 setto isTheirSyntaxEndSymbolEnabled
skip_if_context_21_tag:
sizeof(contextFromConnectResp) != 3 if skip_if_context_22_tag
contextFromConnectResp unbufferit temp 2 syntaxNumTemp 1
$syntaxNumTemp == 1 if skip_if_context_23_tag
1 setto isTheirSyntaxLenEnabled
0 setto isTheirSyntaxEndSymbolEnabled
skip_if_context_23_tag:
$syntaxNumTemp == 2 if skip_if_context_24_tag
0 setto isTheirSyntaxLenEnabled
1 setto isTheirSyntaxEndSymbolEnabled
skip_if_context_24_tag:
skip_if_context_22_tag:
out "their Len = " $isTheirSyntaxLenEnabled " EndSymb " $isTheirSyntaxEndSymbolEnabled

; принимаеи решение о том какое кодирование использовать
$isOurSyntaxLenEnabled == 1 && $isTheirSyntaxLenEnabled == 1 if case_context_31_tag
$isOurSyntaxEndSymbolEnabled == 1 && $isTheirSyntaxEndSymbolEnabled == 1 if case_context_32_tag
out "err could not choose syntax"
raise_err
case_context_31_tag:
1 setto selectedSyntax
goto end_case_context_33_tag
case_context_32_tag:
2 setto selectedSyntax
goto end_case_context_33_tag
end_case_context_33_tag:
out "using syntax " $selectedSyntax

; запоминаем открывающие/закрывающие символы
contextFromConnectReq unbufferit ourOpenSymbol 1 ourCloseSymbol 1
contextFromConnectResp unbufferit theirOpenSymbol 1 theirCloseSymbol 1

; отправляем принятое решение на другое устройство
contextForConnectConf pack $ourOpenSymbol 1 $ourCloseSymbol 1 $selectedSyntax 1 3
dataToSend pack 3 1 $contextForConnectConf sizeof(contextFromConnectResp) sizeof(contextFromConnectResp)+1
userdata $dataToSend eventdown S_EXPEDITED_DATA.REQ

; завершаем этап соединения
quality $savedQuality context $contextForConnectConf sendup P_CONNECT.CONF
return

context_from_conf_tag:
out "received context from conf"
; распаковываем их значения и выбранный синтаксис
$dataReceived setto contextForConnectConf
contextForConnectConf unbufferit theirOpenSymbol 1 theirCloseSymbol 1 selectedSyntax 1
; распаковываем свои значения
contextFromConnectResp unbufferit ourOpenSymbol 1 ourCloseSymbol 1
return

original_data_tag:
out "received original data"

$selectedSyntax == 1 if len_tag
$selectedSyntax == 2 if end_symb_tag

return

; #######################
; ##         len decoding         ##
; #######################
len_tag:
out "decode len"

dataReceived unbufferit dataType 1 temp 1 mainPaylod sizeof(dataReceived)-2
out "dataType = " $dataType
$dataType == 1 if len_structure_tag
$dataType == 2 if len_int_and_str_tag
$dataType == 3 if len_int_and_str_tag
$dataType == 4 if len_structure_tag

return

len_int_and_str_tag:
out "len_int_and_str up tag"
; пакуем и отправляем
dataToSend pack $dataType 1 $mainPaylod sizeof(mainPaylod) sizeof(mainPaylod)+1
goto send_data_tag
return

len_structure_tag:
out "len_structure up tag"

; декодируем структуру по кусочкам : звук, действие, цвет, запах
mainPaylod unbufferit structureDType 1 structureDLen 1 mainPaylod sizeof(mainPaylod)-2
mainPaylod unbufferit sound $structureDLen mainPaylod sizeof(mainPaylod)-$structureDLen
mainPaylod unbufferit structureDType 1 structureDLen 1 mainPaylod sizeof(mainPaylod)-2
mainPaylod unbufferit action $structureDLen mainPaylod sizeof(mainPaylod)-$structureDLen
mainPaylod unbufferit structureDType 1 structureDLen 1 mainPaylod sizeof(mainPaylod)-2
mainPaylod unbufferit colour $structureDLen mainPaylod sizeof(mainPaylod)-$structureDLen
mainPaylod unbufferit structureDType 1 structureDLen 1 mainPaylod sizeof(mainPaylod)-2
mainPaylod unbufferit smell $structureDLen mainPaylod sizeof(mainPaylod)-$structureDLen

; пакуем структуру и отправляем ее
goto pack_structure_and_send_tag
return

; #######################
; ## end symbol decoding ##
; #######################
end_symb_tag:
out "decode end symbol"

dataReceived unbufferit dataType 1 mainPaylod sizeof(dataReceived)-2 temp 1
out "dataType = " $dataType
$dataType == 1 if end_structure_tag
$dataType == 2 if end_int_and_str_tag
$dataType == 3 if end_int_and_str_tag
$dataType == 4 if end_structure_tag

return

end_int_and_str_tag:
out "end_int_and_str up tag"
; пакуем и отправляем
dataToSend pack $dataType 1 $mainPaylod sizeof(mainPaylod) sizeof(mainPaylod)+1
goto send_data_tag
return

end_structure_tag:
out "end_structure up tag"
; получаем структуру
mainPaylod unbufferit tempStr sizeof(mainPaylod )

; вырезаем кусочки данных : звук, действие, цвет, запах
copy (tempStr, 2, pos($endSymbol, tempStr)-2) setto sound
copy (tempStr, sizeof(sound)+3, sizeof(tempStr)-sizeof(sound)-2) setto tempStr
copy (tempStr, 2, pos($endSymbol, tempStr)-2) setto action
copy (tempStr, sizeof(action)+3, sizeof(tempStr)-sizeof(action)-2) setto tempStr
copy (tempStr, 2, pos($endSymbol, tempStr)-2) setto colour
copy (tempStr, sizeof(colour)+3, sizeof(tempStr)-sizeof(colour)-2) setto tempStr
copy (tempStr, 2, pos($endSymbol, tempStr)-2) setto smell

; пакуем структуру и отправляем структуру
goto pack_structure_and_send_tag
return

; #######################
; ##         common part         ##
; #######################

pack_structure_and_send_tag:
10 + sizeof(sound) + sizeof(action) + sizeof(colour) + sizeof(smell) setto totalLen
dataToSend pack $ourOpenSymbol 1 $ourOpenSymbol 1 $sound sizeof(sound) $ourCloseSymbol 1 $ourOpenSymbol 1 $action sizeof(action) $ourCloseSymbol 1 $ourOpenSymbol 1 $colour sizeof(colour) $ourCloseSymbol 1 $ourOpenSymbol 1 $smell sizeof(smell) $ourCloseSymbol 1 $ourCloseSymbol 1 $totalLen
dataToSend pack $dataType 1 $dataToSend sizeof(dataToSend) sizeof(dataToSend)+1
goto send_data_tag
return

send_data_tag:
userdata $dataToSend sendup P_EXPEDITED_DATA.IND
return
