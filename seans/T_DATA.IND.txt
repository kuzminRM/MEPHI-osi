;параметры:  userdata (буфер)
out CurrentSystemName() " t data ind __start"

; достаем entityNum
userdata unbufferit entityNum 1 dataReceived sizeof(userdata)-1

; определяем какой запрос пришел
$entityNum == 1 if s_con_req_tag
$entityNum == 2 if s_con_resp_tag
$entityNum == 3 if s_u_abort_req_tag
$entityNum == 4 if s_data_req_tag
$entityNum == 5 if s_sync_major_req_tag
$entityNum == 6 if s_please_tokens_req_tag
$entityNum == 7 if s_give_tokens_req_tag
$entityNum == 8 if s_sync_major_resp_tag

return

s_con_req_tag:
out "received s_con_req"

; распаковываем все что получили
dataReceived unbufferit addressFromConnectReq 1 qualityFromConnectReq 2 demandFromConnectReq 1

; мы не инициатор
0 setto weAreInitiator

; запоминаем токены
demandFromConnectReq unbufferit demandInt 1
$demandInt == 1 if demand_1_tag
$demandInt == 2 if demand_2_tag
$demandInt == 3 if demand_3_tag
$demandInt == 4 if demand_4_tag
out "err : no such demand " $demandInt
demand_1_tag:
0 setto weHaveDToken
0 setto weHaveSToken
goto demand_final_tag
demand_2_tag:
1 setto weHaveDToken
1 setto weHaveSToken
goto demand_final_tag
demand_3_tag:
0 setto weHaveDToken
1 setto weHaveSToken
goto demand_final_tag
demand_4_tag:
1 setto weHaveDToken
0 setto weHaveSToken
goto demand_final_tag
demand_final_tag:
out "weAreInitiator = " $weAreInitiator ", weHaveDToken = " $weHaveSToken ", weHaveSToken = " $weHaveSToken

; отправляем без изменений
address $addressFromConnectReq quality $qualityFromConnectReq demand $demandFromConnectReq sendup S_CONNECT.IND
return

s_con_resp_tag:
out "received s_con_resp"
; отправляем
quality $dataReceived sendup S_CONNECT.CONF
return

s_u_abort_req_tag:
out "received s_u_abort_req"
; разединяем транспорт
address $addressFromConnectReq eventdown T_DISCONNECT.REQ
; отправляем индикацию
sendup S_U_ABORT.IND
return

s_data_req_tag:
out "received s_data_req"
; кладем пакет в очередь входящих
queue $dataReceived inputDataQueue
return

s_sync_major_req_tag:
out "received s_sync_major_req"
; получаем длину очереди на другой стороне
dataReceived unbufferit receivedDataQueLength 1

; сравниваем нашу длину очереди данных и их
qcount (inputDataQueue) != $receivedDataQueLength if data_queue_length_differ_tag

; запускаем процесс передачи данных
timeevent S_SEND_UP_DATA_TIMER sendDataUpTimer $SEND_UP_DATA_DELAY

return

data_queue_length_differ_tag:
out "data_queue_length_differ"
raise_err
return

s_please_tokens_req_tag:
out "received s_please_tokens_req"
; распаковываем данные
dataReceived unbufferit requestedPleaseToken 1
; отправляем индикацю
token $requestedPleaseToken sendup S_PLEASE_TOKENS.IND
return

s_give_tokens_req_tag:
out "received s_give_tokens_req"
; распаковываем данные
dataReceived unbufferit requestedPleaseToken 1
; принимаем токен
$requestedPleaseToken == 1 if d_token_tag
$requestedPleaseToken == 2 if s_token_tag
end_if_tag:

; отправляем индикацю
token $requestedPleaseToken sendup S_GIVE_TOKENS.IND
return

d_token_tag:
out "received d token"
1 setto weHaveDToken
goto end_if_tag
return

s_token_tag:
out "received s token"
1 setto weHaveSToken
goto end_if_tag
return

s_sync_major_resp_tag:
out "received s_sync_major_resp"
sendup S_SYNC_MAJOR.CONF
return