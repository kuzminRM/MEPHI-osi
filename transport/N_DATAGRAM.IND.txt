;параметры:  address (число), userdata (буфер)
out CurrentSystemName() " n datagram __start"
; проверяем размер полученного буфера
sizeof(userdata) < 3 if too_short_userdata_tag
out "length ok"

; проверяем контрольную сумму
userdata unbufferit crcFromInput 1 userDataNoCrc sizeof(userdata)-1
varcrc crcCalculated $userDataNoCrc
$crcFromInput != $crcCalculated if crc_compare_fail_tag
out "crc ok"

; распаковываем
userDataNoCrc unbufferit currentReqNumInput 1 entityNum 1 transportUserData sizeof(userDataNoCrc)-2
out "unpack ok : req num " $currentReqNumInput ", ent num " $entityNum

; если это MY_INNER_T_DATA.RESP, то у него особый путь
$entityNum == 9 if my_inner_t_data_resp_tag

; если к нам пришел запрос на connect, то насильно сбрасываем счетчики запросов
$entityNum != 1 if skip_set_zero_tocorrebt_req_num_tag
0 setto currentReqNumMy
$currentReqNumTheir == 1 if skip_set_zero_tocorrebt_req_num_tag
0 setto currentReqNumTheir
skip_set_zero_tocorrebt_req_num_tag:

; если порядковый номер тот, что мы сейчас ждем, то начинаем ждать следующий номер
$currentReqNumTheir != $currentReqNumInput if number_compare_fail_tag
$currentReqNumTheir + 1 setto currentReqNumTheir

; отправялем подтверждение (одно),
; если это T_CONNECT.REQ то подтверждение отправляется позже внутри t_con_req_tag, т..к. мы еще не знаем connectedAddr
$entityNum == 1 if skip_t_data_resp_subprog_tag
subprog send_my_inner_t_data_resp_subprog
skip_t_data_resp_subprog_tag:

; определяем какой запрос пришел
$entityNum == 1 if t_con_req_tag
$entityNum == 3 if t_con_resp_tag
$entityNum == 5 if t_discon_req_tag
$entityNum == 7 if t_data_req_tag
out "some unknown entityNum = " $entityNum

return

we_are_dicronnected_tag:
out "we are disconnected"
return

too_short_userdata_tag:
out "too short user data" $userdata
return

crc_compare_fail_tag:
out "crc compare fail"
return

number_compare_fail_tag:
out "number compare fail wait for " $currentReqNumTheir " actual " $currentReqNumInput
; отправялем подтверждение (одно)
subprog send_my_inner_t_data_resp_subprog
return

t_con_req_tag:
out "received t con req"
0 setto isDisconnected
$address setto connectedAddr
; отправялем подтверждение (одно)
subprog send_my_inner_t_data_resp_subprog
address $address sendup T_CONNECT.IND
return

t_con_resp_tag:
out "received t con resp"
$address setto connectedAddr
address $address sendup T_CONNECT.CONF
return

t_discon_req_tag:
; проверяем что мы не находимся в состоянии isDisconnected
$isDisconnected == 1 if we_are_dicronnected_tag
out "received t discon req"
sendup T_DISCONNECT.IND
1 setto isDisconnected
clearqueue sendQueue
0 setto currentReqNumMy
0 setto currentReqNumTheir
return

t_data_req_tag:
out "received t data req"
userdata $transportUserData sendup T_DATA.IND
return

substart send_my_inner_t_data_resp_subprog
out "sending data confirmation : req num = " $currentReqNumInput ", ent num = " $entityNum

transportDataNoCrcMyInnerConfiramtion pack $currentReqNumInput 1 9 1 $entityNum 1 3
varcrc calculatedCrcMyInnerConfiramtion $transportDataNoCrcMyInnerConfiramtion
transportDataMyInnerConfiramtion pack $calculatedCrcMyInnerConfiramtion 1 $transportDataNoCrcMyInnerConfiramtion sizeof(transportDataNoCrcMyInnerConfiramtion)  sizeof(transportDataNoCrcMyInnerConfiramtion)+1

address $connectedAddr userdata $transportDataMyInnerConfiramtion eventdown N_DATAGRAM.REQ

subend
return

my_inner_t_data_resp_tag:
out "received my inner t data conf with req num " $currentReqNumInput " current last que req num " $currentReqNumQueueMyInnerConfiramtion
; получаем нужные нам данные
qcount (sendQueue) == 0 if skip_my_inner_t_data_resp_tag
peek (sendQueue) setto transportDataMyInnerConfiramtion
transportDataMyInnerConfiramtion unbufferit crcFromQueueMyInnerConfiramtion 1 currentReqNumQueueMyInnerConfiramtion 1 entityNumQueueMyInnerConfiramtion 1
; если порядковый номер подтвержденного пакета равен
; порядковому номеру того пакета который сейчас крайний в очереди, то убираем его из очереди
; т.е. производим процесс подтверждения
$currentReqNumQueueMyInnerConfiramtion != $currentReqNumInput if skip_my_inner_t_data_resp_tag
dequeue (sendQueue) setto transportDataMyInnerConfiramtion
skip_my_inner_t_data_resp_tag:
return